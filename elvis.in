#!/bin/sh
# elvis: {{ name }}	-- {{ description }}
. surfraw || exit 1

w3_usage_hook ()
{
	cat <<EOF
Usage: $w3_argv0 [options] [search words]...
Description:
  {{ description }}
EOF
	w3_global_usage
}

{# Only define the option parsing if any #}
{# flags, bools, enums, or aliases are defined #}
{% if any_options_defined() %}
w3_config_hook ()
{
	# Flags don't use any config
	# Bools
	{% for bool in bools %}
	defyn {{ namespace(bool.name) }} {{ bool.default }}
	{% else %}
	## No bools
	{% endfor %}
	# Enums
	{% for enum in enums %}
	def {{ namespace(enum.name) }} {{ enum.default }}
	{% else %}
	## No enums
	{% endfor %}
	# Aliases don't use any config
}

w3_parse_option_hook ()
{
	opt="$1"
	optarg="$2"
	case "$opt" in
		# Flags
		{% for flag in flags %}
		-{{ flag.name }}) setoptyn {{ namespace(flag.target.name) }} {{ flag.value }} ;;
		{% else %}
		## No flags
		{% endfor %}
		# Bools
		{% for bool in bools %}
		-{{ bool.name }}=*) setoptyn {{ namespace(bool.name) }} $optarg ;;
		{% else %}
		## No bools
		{% endfor %}
		# Enums
		{% for enum in enums %}
		-{{ enum.name }}=*) setopt {{ namespace(enum.name) }} $optarg ;;
		{% else %}
		## No enums
		{% endfor %}
		# Aliases
		{% for alias in aliases %}
		{% if alias.target is flag_option %}
		-{{ alias.name }}) setoptyn {{ namespace(alias.target.target) }} {{ alias.target.value }} ;;
		{% elif alias.target is bool_option %}
		-{{ alias.name }}=*) setoptyn {{ namespace(alias.target.name) }} $optarg ;;
		{% elif alias.target is enum_option %}
		-{{ alias.name }}=*) setopt {{ namespace(alias.target.name) }} $optarg ;;
		{% else %}
		err "Alias target type unhandled! This should never have been reached. This is a bug!"
		{% endif %}
		{% else %}
		## No aliases
		{% endfor %}
		*) return 1 ;;
	esac
	return 0
}
{% endif %}

w3_config
w3_parse_args "$@"
if test -z "$w3_args"; then
	w3_browse_url "{{ base_url }}"
else
	escaped_args=$(w3_url_of_arg $w3_args)
	search_url="{{ search_url }}"
	{% for enum in enums %}
	case "${{ namespace(enum.name) }}" in
		{{ '|'.join(enum.values) }}) echo FILL ME IN ;;
		*) err "Invalid value for {{ namespace(enum.name) }}" ;;
	esac
	{% endfor %}

	# Map variables to parameters
	{% for map in mappings %}
	search_url="$search_url&{{ map.parameter }}=${{ namespace(map.variable) }}"
	{% else %}
	## No mappings
	{% endfor %}

	# Add the search to url
	{# Mappings and a query parameter are necessarily inclusive #}
	{# `mkelvis` should prevent a situation where only one of the two are true #}
	{% if mappings|length > 0 and query_parameter is not none %}
	search_url="$search_url&{{ query_parameter }}=$escaped_args"
	{% else %}
	search_url="${search_url}${escaped_args}"
	{% endif %}
	w3_browse_url "$search_url"
fi
