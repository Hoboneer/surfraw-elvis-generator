# Bash completion script for standalone surfraw elvi
# Generated by {{ GENERATOR_PROGRAM }}

{# TODO: Make these macros indent correctly... #}
{% macro complete_enum(enum) %}
# Option is in the form `opt=`
if [ "$cur" = '='  ] && [ "$prev" = '-{{ enum.name }}' ]; then
	COMPREPLY=( {% for val in enum.values %}'{{ val }}' {% endfor %} )
	return 0
fi
# TODO: Option is in the form `opt=*`
{% endmacro %}

{% macro complete_bool(bool) %}
# Option is in the form `opt=`
if [ "$cur" = '='  ] && [ "$prev" = '-{{ bool.name }}' ]; then
	COMPREPLY=( $(compgen -W "$yes_no_args") )
	return 0
fi
{% endmacro %}

_surfraw_{{ name }} ()
{
	COMPREPLY=()
	local cur=${COMP_WORDS[COMP_CWORD]}
	local prev=${COMP_WORDS[COMP_CWORD-1]}
	local opts='{% for opt in chain.from_iterable(options) %}-{{ opt.name }}{% if not loop.last %} {% endif %}{% endfor %}'
	local yes_no_args='yes no on off 1 0'

	# Enums
	{% for enum in enums %}
	{{ complete_enum(enum) }}
	{% endfor %}

	# Bools
	{% for bool in bools %}
	{{ complete_bool(bool) }}
	{% endfor %}

	if [[ "$cur" =~ -[^=]* ]]; then
		COMPREPLY=( $(compgen -W "$opts" -- $cur) )
		return 0
	fi
}
## test first in case removed-but-unpurged
#type -p {{ name }} >/dev/null 2>&1 && complete -F _surfraw_{{ name }} {{ name }}
complete -F _surfraw_{{ name }} {{ name }}
