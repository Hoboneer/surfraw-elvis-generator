#!/bin/sh
# elvis: {{ name }}	-- {{ description }}
# Generated-By: {{ GENERATOR_PROGRAM }}
. surfraw || exit 1

w3_usage_hook ()
{
	cat <<EOF
Usage: $w3_argv0 [options] [search words]...
Description:
  {{ description|replace('$', '\\$') }}
{% if any_options_defined %}
Local options:
{{ local_help_output }}
{% endif %}
EOF
	w3_global_usage
}

{# Only define the option parsing if any #}
{# flags, bools, enums, or aliases are defined #}
{% if any_options_defined %}
w3_config_hook ()
{
	# Flags don't use any config

	# Bools
	{% for bool in bools %}
	defyn {{ bool.name|ns }} {{ bool.default }}
	{% else %}
	## defyn {{ 'variable'|ns }} default_yes_or_no
	{% endfor %}

	# Members don't use any config

	# Enums
	{% for enum in enums %}
	def {{ enum.name|ns }} {{ enum.default }}
	{% else %}
	## defyn {{ 'variable'|ns }} default_enum_value
	{% endfor %}

	# 'Anythings'
	{% for anything in anythings %}
	def {{ anything.name|ns }} {{ anything.default }}
	{% else %}
	## defyn {{ 'variable'|ns }} default_anything
	{% endfor %}

	# Aliases don't use any config
}

{% macro _parse_option(opt, has_arg, setopt='setopt') %}
{% set opts = [opt] + opt.aliases|list %}
{% if has_arg %}
	{% set suffix = "=*" %}
{% else %}
	{% set suffix = "" %}
{% endif %}
{% set ns = namespace(patterns=[]) %}
{% for name in opts|map(attribute='name')|sort %}
	{% set ns.patterns = ns.patterns + ["-" ~ name ~ suffix] %}
{% endfor %}
{% if not has_arg %}
	{% set varname = opt.target.name %}
	{% set optarg = opt.value %}
{% else %}
	{% set varname = opt.name %}
	{% set optarg = "$optarg" %}
{% endif %}
{{ ns.patterns|join('|') }}) {{ setopt }} {{ varname|ns }} {{ optarg }} ;;
{%- endmacro %}
{% macro _parse_options(opts, default_optname, default_value, settings) %}
{% for opt in opts %}
{{ _parse_option(opt, **settings) }}
{% else %}
{% if settings.has_arg %}
	{% set suffix = "=*" %}
	{% set varname = default_optname %}
{% else %}
	{% set suffix = "" %}
	{% set varname = "targetname" %}
{% endif %}
##-{{ default_optname }}{{ suffix }}|-alias1{{ suffix }}|-alias2{{ suffix }}) {{ settings.get('setopt', 'setopt') }} {{ varname|ns }} {{ default_value }} ;;
{% endfor %}
{%- endmacro %}
{% macro parse_options() %}
{{ _parse_options(*varargs, **kwargs)|indent(8)|replace('    ', '\t') }}
{%- endmacro %}
w3_parse_option_hook ()
{
	opt="$1"
	optarg="$2"
	case "$opt" in
		# Flags
		{{ parse_options(flags, default_optname='flag', default_value='flag_value_yes_or_no', settings={'has_arg': False, 'setopt': 'setoptyn'}) }}
		# Bools
		{{ parse_options(bools, default_optname='bool', default_value='$optarg', settings={'has_arg': True, 'setopt': 'setoptyn'}) }}
		# Members
		{{ parse_options(members, default_optname='member', default_value='enum_value', settings={'has_arg': False}) }}
		# Enums
		{{ parse_options(enums, default_optname='enum', default_value='$optarg', settings={'has_arg': True}) }}
		# 'Anythings'
		{{ parse_options(anythings, default_optname='anything', default_value='$optarg', settings={'has_arg': True}) }}
		*) return 1 ;;
	esac
	return 0
}
{% endif %}

w3_config
w3_parse_args "$@"

escaped_args=$(w3_url_of_arg $w3_args)

# Check enums
{% for enum in enums %}
case "${{ enum.name|ns }}" in
	{{ '|'.join(enum.values) }}) ;;
	*) err "Invalid value for {{ enum.name|ns }}" ;;
esac
{% endfor %}

# Collapse variables
{# TODO: Name this better! #}
{% for collapse in collapses %}
case "${{ collapse.variable|ns }}" in
	{% for branch in collapse.collapses %}
	{# Last in `branch` is the result #}
	{{ '|'.join(branch[:-1]) }}) {{ collapse.variable|ns }}={{ branch[-1] }} ;;
	{% endfor %}
esac
{% endfor %}

# Any variables in the url should have values now
if test -z "$w3_args"; then
	w3_browse_url "{{ base_url }}"
	exit
fi
# Map variables to parameters
search_url="{{ search_url }}"
{% for map in mappings %}
{# The first iteration is special #}
{% if loop.first %}
search_url="${search_url}{{ map.parameter }}=${{ map.variable|ns }}"
{% else %}
search_url="$search_url&{{ map.parameter }}=${{ map.variable|ns }}"
{% endif %}
{% else %}
## First parameter
##search_url="${search_url}param1=${{ 'variable1'|ns }}"
## Successive parameters
##search_url="$search_url&param2=${{ 'variable2'|ns }}"
{% endfor %}

# Add the search to url
{# Mappings and a query parameter are necessarily inclusive #}
{# `mkelvis` should prevent a situation where only one of the two are true #}
{% if mappings|length > 0 and query_parameter is not none %}
search_url="$search_url&{{ query_parameter }}=$escaped_args"
{% else %}
search_url="${search_url}${escaped_args}"
{% endif %}
w3_browse_url "$search_url"
