#!/bin/sh
# elvis: {{ name }}	-- {{ description }}
# Generated by {{ GENERATOR_PROGRAM }}
. surfraw || exit 1

w3_usage_hook ()
{
	cat <<EOF
Usage: $w3_argv0 [options] [search words]...
Description:
  {{ description }}
EOF
	w3_global_usage
}

{# Only define the option parsing if any #}
{# flags, bools, enums, or aliases are defined #}
{% if any_options_defined %}
w3_config_hook ()
{
	# Flags don't use any config

	# Bools
	{% for bool in bools %}
	defyn {{ bool.name|ns }} {{ bool.default }}
	{% else %}
	## defyn {{ 'variable'|ns }} {{ 'default_yes_or_no' }}
	{% endfor %}

	# Enums
	{% for enum in enums %}
	def {{ enum.name|ns }} {{ enum.default }}
	{% else %}
	## defyn {{ 'variable'|ns }} {{ 'default_enum_value' }}
	{% endfor %}

	# 'Anythings'
	{% for anything in anythings %}
	def {{ anything.name|ns }} {{ anything.default }}
	{% else %}
	## defyn {{ 'variable'|ns }} {{ 'default_anything' }}
	{% endfor %}

	# Aliases don't use any config
}

w3_parse_option_hook ()
{
	opt="$1"
	optarg="$2"
	case "$opt" in
		# Flags
		{% for flag in flags %}
		-{{ flag.name }}) setoptyn {{ flag.target.name|ns }} {{ flag.value }} ;;
		{% else %}
		##-flag) setoptyn {{ 'targetname'|ns }} {{ 'flag_value_yes_or_no' }} ;;
		{% endfor %}

		# Bools
		{% for bool in bools %}
		-{{ bool.name }}=*) setoptyn {{ bool.name|ns }} $optarg ;;
		{% else %}
		##-bool=*) setoptyn {{ 'bool'|ns }} $optarg ;;
		{% endfor %}

		# Enums
		{% for enum in enums %}
		-{{ enum.name }}=*) setopt {{ enum.name|ns }} $optarg ;;
		{% else %}
		##-enum=*) setopt {{ 'enum'|ns }} $optarg ;;
		{% endfor %}

		# 'Anythings'
		{% for anything in anythings %}
		-{{ anything.name }}=*) setopt {{ anything.name|ns }} $optarg ;;
		{% else %}
		##-anything=*) setopt {{ 'anything'|ns }} $optarg ;;
		{% endfor %}

		# Aliases
		{% for alias in aliases %}
		{% if alias.target is flag_option %}
		-{{ alias.name }}) setoptyn {{ alias.target.target.name|ns }} {{ alias.target.value }} ;;
		{% elif alias.target is bool_option %}
		-{{ alias.name }}=*) setoptyn {{ alias.target.name|ns }} $optarg ;;
		{% elif alias.target is enum_option %}
		-{{ alias.name }}=*) setopt {{ alias.target.name|ns }} $optarg ;;
		{% elif alias.target is anything_option %}
		-{{ alias.name }}=*) setopt {{ alias.target.name|ns }} $optarg ;;
		{% else %}
		err "Alias target type unhandled! This should never have been reached. This is a bug!"
		{% endif %}
		{% else %}
		## No aliases
		## Use the examples for the other option types to derive one for its alias
		{% endfor %}
		*) return 1 ;;
	esac
	return 0
}
{% endif %}

w3_config
w3_parse_args "$@"
if test -z "$w3_args"; then
	w3_browse_url "{{ base_url }}"
else
	escaped_args=$(w3_url_of_arg $w3_args)
	{% for enum in enums %}
	case "${{ enum.name|ns }}" in
		{{ '|'.join(enum.values) }}) ;;
		*) err "Invalid value for {{ enum.name|ns }}" ;;
	esac
	{% endfor %}
	{% if collapses|length > 0 %}

	# Collapse variables
	{# TODO: Name this better! #}
	{% for collapse in collapses %}
	case "${{ collapse.variable|ns }}" in
		{% for branch in collapse.collapses %}
		{# Last in `branch` is the result #}
		{{ '|'.join(branch[:-1]) }}) {{ collapse.variable|ns }}={{ branch[-1] }} ;;
		{% endfor %}
	esac
	{% endfor %}
	{% endif %}

	# Map variables to parameters
	search_url="{{ search_url }}"
	{% for map in mappings %}
	{# The first iteration is special #}
	{% if loop.first %}
	search_url="${search_url}{{ map.parameter }}=${{ map.variable|ns }}"
	{% else %}
	search_url="$search_url&{{ map.parameter }}=${{ map.variable|ns }}"
	{% endif %}
	{% else %}
	## First parameter
	##search_url="${search_url}param1=${{ 'variable1'|ns }}"
	## Successive parameters
	##search_url="$search_url&param2=${{ 'variable2'|ns }}"
	{% endfor %}

	# Add the search to url
	{# Mappings and a query parameter are necessarily inclusive #}
	{# `mkelvis` should prevent a situation where only one of the two are true #}
	{% if mappings|length > 0 and query_parameter is not none %}
	search_url="$search_url&{{ query_parameter }}=$escaped_args"
	{% else %}
	search_url="${search_url}${escaped_args}"
	{% endif %}
	w3_browse_url "$search_url"
fi
