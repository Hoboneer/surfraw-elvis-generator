#!/usr/bin/env python3
# Copyright 2019 Gabriel Lisaca
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import sys
import os
import re

TEMPLATE_ELVIS = """\
#!/bin/sh
# elvis: @ELVIS_NAME@          -- @ELVIS_DESC@
. surfraw || exit 1

w3_usage_hook () {
    cat <<EOF
Usage: $w3_argv0 [options] [search words]...
Description:
  @ELVIS_DESC@
EOF
    w3_global_usage
}

w3_config
w3_parse_args "$@"
if test -z "$w3_args"; then
    w3_browse_url "@DEFAULT_URL@"
else
    escaped_args=$(w3_url_of_arg $w3_args)
    w3_browse_url "@SEARCH_URL@${escaped_args}"
fi
"""
# Variables to replace:
#   ELVIS_NAME
#   ELVIS_DESC
#   DEFAULT_URL
#   SEARCH_URL

# Values correspond to attributes on `args` object in `main`.
VAR_REPLACEMENTS = {
    "ELVIS_NAME": "name",
    "ELVIS_DESC": "description",
    "DEFAULT_URL": "base_url",
    "SEARCH_URL": "search_url",
}
# Add the sigils.
VAR_REPLACEMENTS = {f"@{key}@": val for key, val in VAR_REPLACEMENTS.items()}


def get_parser():
    parser = argparse.ArgumentParser(description="generate an elvis for surfraw")
    parser.add_argument("name", help="name for the elvis")
    parser.add_argument(
        "base_url",
        help="the url to show in the description and is the url opened when no search terms are passed, with no protocol",
    )
    parser.add_argument(
        "search_url",
        help="the url to append arguments to, with the query parameters opened and no protocol (automatically set to 'https')",
    )
    parser.add_argument(
        "--description",
        help="description for the elvis, excluding the domain name in parentheses",
    )
    parser.add_argument(
        "--insecure", action="store_true", help="use 'http' instead of 'https'"
    )
    return parser


# Taken from this stackoverflow answer:
#   https://stackoverflow.com/questions/12791997/how-do-you-do-a-simple-chmod-x-from-within-python/30463972#30463972
def make_executable(path):
    mode = os.stat(path).st_mode
    mode |= (mode & 0o444) >> 2  # copy R bits to X
    os.chmod(path, mode)


def main(args):
    """Main program to generate surfraw elvi.

    Exit codes:
        99 - an internal error occurred
    """
    if args.description is None:
        args.description = f"Search {args.name} ({args.base_url})"
    else:
        args.description += f" ({args.base_url})"

    if args.insecure:
        # Is this the right term?
        url_scheme = "http"
    else:
        url_scheme = "https"

    args.base_url = f"{url_scheme}://{args.base_url}"
    args.search_url = f"{url_scheme}://{args.search_url}"

    # Generate the elvis.
    pattern = re.compile("|".join(re.escape(key) for key in VAR_REPLACEMENTS))
    elvis_program = pattern.sub(
        lambda m: getattr(args, VAR_REPLACEMENTS[m.group(0)]), TEMPLATE_ELVIS
    )

    try:
        with open(args.name, "w") as f:
            f.write(elvis_program)
        make_executable(args.name)
    except OSError:
        return 99
    return 0


if __name__ == "__main__":
    sys.exit(main(get_parser().parse_args()))
